[project]
name = "crosscode-version-archive-tools"
version = "0.0.0"
description = ""
license = "CC0-1.0"
readme = "README.md"
requires-python = ">=3.13"
dynamic = ["dependencies"]

[tool.poetry.dependencies]
pyyaml = "^6.0.2"
steam = {version = "^1.4.4", extras = ["client"]}
mwclient = "^0.11.0"

[tool.poetry.group.dev.dependencies]
basedpyright = "^1.31.4"
ruff = "^0.13.1"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "basic"

[tool.ruff]
line-length = 100
indent-width = 2

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
preview = true

[tool.ruff.lint]

# <https://beta.ruff.rs/docs/rules/>
select = [
  "E",   # pycodestyle (errors)
  "W",   # pycodestyle (warnings)
  "F",   # pyflakes
  "ANN", # flake8-annotations
  "N",   # pep8-naming
  "I",   # isort
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "UP",  # pyupgrade
  "PLC", # pylint (convention)
  "PLE", # pylint (errors)
  "PLW", # pylint (warnings)
]

ignore = [
  "E402",     # module level import not at top of file
  "PLC0415",  # same thing, import not at the top-level of a file
  "E501",     # line too long
  "S101",     # use of `assert` detected
  "S311",     # standard PRNGs are not suitable for cryptography
  "ANN401",   # dynamically typed expressions are disallowed
  "PLW0603",  # using the global statement is discouraged
  "PLW2901",  # outer loop variable overwritten by inner loop target
  "B905",     # `zip()` without an explicit `strict` parameter
  "E731",     # use `def` instead of assigning `lambda` to a variable
  "B009",     # `getattr()` with a constant string
  "B010",     # `setattr()` with a constant string
  "UP015",    # unnecessary mode argument "r" for `open()`
]
